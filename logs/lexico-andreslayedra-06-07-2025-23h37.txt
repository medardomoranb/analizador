USING           -> using
IDENTIFICADOR   -> System
PUNTO_COMA      -> ;
PUBLIC          -> public
CLASS           -> class
NOMBRE_CLASE    -> Producto
LLAVE_IZQ       -> {
STRING          -> string
IDENTIFICADOR   -> nombre
ASIGNACION      -> =
STRING_LITERAL  -> Mouse inalámbrico
PUNTO_COMA      -> ;
FLOAT           -> float
IDENTIFICADOR   -> precio
ASIGNACION      -> =
FLOAT_LITERAL   -> 19.99
PUNTO_COMA      -> ;
INT             -> int
IDENTIFICADOR   -> stock
ASIGNACION      -> =
NUMERO          -> 12
PUNTO_COMA      -> ;
PUBLIC          -> public
VOID            -> void
IDENTIFICADOR   -> MostrarInfo
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Producto: 
MAS             -> +
IDENTIFICADOR   -> nombre
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Precio: $
MAS             -> +
IDENTIFICADOR   -> precio
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Stock disponible: 
MAS             -> +
IDENTIFICADOR   -> stock
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IF              -> if
PARENTESIS_IZQ  -> (
IDENTIFICADOR   -> stock
MAYOR           -> >
NUMERO          -> 0
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Producto en inventario.
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
LLAVE_DER       -> }
ELSE            -> else
LLAVE_IZQ       -> {
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Producto agotado.
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
LLAVE_DER       -> }
IF              -> if
PARENTESIS_IZQ  -> (
IDENTIFICADOR   -> precio
MAYOR_IGUAL     -> >=
NUMERO          -> 15
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Precio válido para la venta.
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
LLAVE_DER       -> }
ELSE            -> else
LLAVE_IZQ       -> {
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Precio demasiado bajo, revisar margen de ganancia.
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
LLAVE_DER       -> }
LLAVE_DER       -> }
PUBLIC          -> public
BOOL            -> bool
IDENTIFICADOR   -> DisponibleParaVenta
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
IF              -> if
PARENTESIS_IZQ  -> (
IDENTIFICADOR   -> stock
MAYOR           -> >
NUMERO          -> 0
AND             -> &&
IDENTIFICADOR   -> precio
MAYOR_IGUAL     -> >=
NUMERO          -> 15
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
RETURN          -> return
IDENTIFICADOR   -> true
PUNTO_COMA      -> ;
LLAVE_DER       -> }
RETURN          -> return
IDENTIFICADOR   -> false
PUNTO_COMA      -> ;
LLAVE_DER       -> }
PUBLIC          -> public
ENUM            -> enum
IDENTIFICADOR   -> Categoria
LLAVE_IZQ       -> {
IDENTIFICADOR   -> Electronica
COMA            -> ,
IDENTIFICADOR   -> Oficina
COMA            -> ,
IDENTIFICADOR   -> Hogar
LLAVE_DER       -> }
PUBLIC          -> public
STRUCT          -> struct
IDENTIFICADOR   -> Garantia
LLAVE_IZQ       -> {
PUBLIC          -> public
INT             -> int
IDENTIFICADOR   -> anios
PUNTO_COMA      -> ;
PUBLIC          -> public
BOOL            -> bool
IDENTIFICADOR   -> incluyeDanios
PUNTO_COMA      -> ;
PUBLIC          -> public
IDENTIFICADOR   -> Garantia
PARENTESIS_IZQ  -> (
INT             -> int
IDENTIFICADOR   -> anios
COMA            -> ,
BOOL            -> bool
IDENTIFICADOR   -> incluyeDanios
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
THIS            -> this
PUNTO           -> .
IDENTIFICADOR   -> anios
ASIGNACION      -> =
IDENTIFICADOR   -> anios
PUNTO_COMA      -> ;
THIS            -> this
PUNTO           -> .
IDENTIFICADOR   -> incluyeDanios
ASIGNACION      -> =
IDENTIFICADOR   -> incluyeDanios
PUNTO_COMA      -> ;
LLAVE_DER       -> }
LLAVE_DER       -> }
LLAVE_DER       -> }
PUBLIC          -> public
CLASS           -> class
NOMBRE_CLASE    -> Inventario
LLAVE_IZQ       -> {
PUBLIC          -> public
VOID            -> void
IDENTIFICADOR   -> ClasificarProducto
PARENTESIS_IZQ  -> (
INT             -> int
IDENTIFICADOR   -> codigo
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
SWITCH          -> switch
PARENTESIS_IZQ  -> (
IDENTIFICADOR   -> codigo
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
CASE            -> case
NUMERO          -> 100
DOS_PUNTOS      -> :
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Producto clasificado como: Electrónica
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
BREAK           -> break
PUNTO_COMA      -> ;
CASE            -> case
NUMERO          -> 200
DOS_PUNTOS      -> :
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Producto clasificado como: Oficina
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
BREAK           -> break
PUNTO_COMA      -> ;
CASE            -> case
NUMERO          -> 300
DOS_PUNTOS      -> :
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Producto clasificado como: Hogar
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
BREAK           -> break
PUNTO_COMA      -> ;
DEFAULT         -> default
DOS_PUNTOS      -> :
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Código no reconocido.
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
BREAK           -> break
PUNTO_COMA      -> ;
LLAVE_DER       -> }
LLAVE_DER       -> }
PUBLIC          -> public
VOID            -> void
IDENTIFICADOR   -> MostrarCiclo
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
FOR             -> for
PARENTESIS_IZQ  -> (
INT             -> int
IDENTIFICADOR   -> i
ASIGNACION      -> =
NUMERO          -> 1
PUNTO_COMA      -> ;
IDENTIFICADOR   -> i
MENOR_IGUAL     -> <=
NUMERO          -> 3
PUNTO_COMA      -> ;
IDENTIFICADOR   -> i
INCREMENTO      -> ++
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
IF              -> if
PARENTESIS_IZQ  -> (
IDENTIFICADOR   -> i
IGUAL           -> ==
NUMERO          -> 2
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
CONTINUE        -> continue
PUNTO_COMA      -> ;
LLAVE_DER       -> }
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Iteración número: 
MAS             -> +
IDENTIFICADOR   -> i
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IF              -> if
PARENTESIS_IZQ  -> (
IDENTIFICADOR   -> i
IGUAL           -> ==
NUMERO          -> 3
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
BREAK           -> break
PUNTO_COMA      -> ;
LLAVE_DER       -> }
LLAVE_DER       -> }
LLAVE_DER       -> }
PUBLIC          -> public
VOID            -> void
IDENTIFICADOR   -> MostrarCaracteres
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
CHAR            -> char
IDENTIFICADOR   -> inicial
ASIGNACION      -> =
CHAR_LITERAL    -> M
PUNTO_COMA      -> ;
CHAR            -> char
IDENTIFICADOR   -> final
ASIGNACION      -> =
CHAR_LITERAL    -> Z
PUNTO_COMA      -> ;
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Inicial: 
MAS             -> +
IDENTIFICADOR   -> inicial
MAS             -> +
STRING_LITERAL  -> , Final: 
MAS             -> +
IDENTIFICADOR   -> final
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
LLAVE_DER       -> }
LLAVE_DER       -> }
XML_COMMENT     -> /// <summary>
XML_COMMENT     -> /// Sección de prueba para tokens personalizados relacionados con productos e inventario.
XML_COMMENT     -> /// </summary>
PUBLIC          -> public
CLASS           -> class
NOMBRE_CLASE    -> DiagnosticoInventario
LLAVE_IZQ       -> {
PUBLIC          -> public
VOID            -> void
IDENTIFICADOR   -> EjecutarAnalisis
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
FLOAT           -> float
IDENTIFICADOR   -> temperaturaAlmacen
ASIGNACION      -> =
FLOAT_LITERAL   -> 22.5
PUNTO_COMA      -> ;
BOOL            -> bool
IDENTIFICADOR   -> productoActivo
ASIGNACION      -> =
IDENTIFICADOR   -> true
PUNTO_COMA      -> ;
STRING          -> string
IDENTIFICADOR   -> fechaRegistro
ASIGNACION      -> =
DATE_LITERAL    -> 2025-06-14
PUNTO_COMA      -> ;
INT             -> int
IDENTIFICADOR   -> codigoHex
ASIGNACION      -> =
HEX_LITERAL     -> 500
PUNTO_COMA      -> ;
INT             -> int
IDENTIFICADOR   -> codigoBin
ASIGNACION      -> =
BIN_LITERAL     -> 10
PUNTO_COMA      -> ;
IF              -> if
PARENTESIS_IZQ  -> (
IDENTIFICADOR   -> productoActivo
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Diagnóstico: Producto activo registrado el 
MAS             -> +
IDENTIFICADOR   -> fechaRegistro
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Código Hex: 
MAS             -> +
IDENTIFICADOR   -> codigoHex
MAS             -> +
STRING_LITERAL  -> , Binario: 
MAS             -> +
IDENTIFICADOR   -> codigoBin
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Temperatura del almacén: 
MAS             -> +
IDENTIFICADOR   -> temperaturaAlmacen
MAS             -> +
STRING_LITERAL  -> °C
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
LLAVE_DER       -> }
ELSE            -> else
LLAVE_IZQ       -> {
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> Producto inactivo.
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
LLAVE_DER       -> }
LLAVE_DER       -> }
LLAVE_DER       -> }
PUBLIC          -> public
CLASS           -> class
NOMBRE_CLASE    -> Programa
LLAVE_IZQ       -> {
PUBLIC          -> public
STATIC          -> static
VOID            -> void
IDENTIFICADOR   -> Main
PARENTESIS_IZQ  -> (
STRING          -> string
CORCHETE_IZQ    -> [
CORCHETE_DER    -> ]
IDENTIFICADOR   -> args
PARENTESIS_DER  -> )
LLAVE_IZQ       -> {
IDENTIFICADOR   -> Producto
IDENTIFICADOR   -> p
ASIGNACION      -> =
NEW             -> new
IDENTIFICADOR   -> Producto
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IDENTIFICADOR   -> p
PUNTO           -> .
IDENTIFICADOR   -> MostrarInfo
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
BOOL            -> bool
IDENTIFICADOR   -> puedeVenderse
ASIGNACION      -> =
IDENTIFICADOR   -> p
PUNTO           -> .
IDENTIFICADOR   -> DisponibleParaVenta
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IDENTIFICADOR   -> Console
PUNTO           -> .
IDENTIFICADOR   -> WriteLine
PARENTESIS_IZQ  -> (
STRING_LITERAL  -> ¿Disponible para la venta?: 
MAS             -> +
IDENTIFICADOR   -> puedeVenderse
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IDENTIFICADOR   -> DiagnosticoInventario
IDENTIFICADOR   -> d
ASIGNACION      -> =
NEW             -> new
IDENTIFICADOR   -> DiagnosticoInventario
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IDENTIFICADOR   -> d
PUNTO           -> .
IDENTIFICADOR   -> EjecutarAnalisis
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
IDENTIFICADOR   -> d
PUNTO           -> .
IDENTIFICADOR   -> MostrarMensaje
PARENTESIS_IZQ  -> (
PARENTESIS_DER  -> )
PUNTO_COMA      -> ;
LLAVE_DER       -> }
LLAVE_DER       -> }