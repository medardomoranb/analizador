USING           -> using
ID              -> System
SEMICOLON       -> ;
PUBLIC          -> public
CLASS           -> class
CLASS_NAME      -> Producto
LBRACE          -> {
STRING          -> string
ID              -> nombre
ASSIGN          -> =
STRING_LITERAL  -> Mouse inalámbrico
SEMICOLON       -> ;
FLOAT           -> float
ID              -> precio
ASSIGN          -> =
FLOAT_LITERAL   -> 19.99
SEMICOLON       -> ;
INT             -> int
ID              -> stock
ASSIGN          -> =
NUMBER          -> 12
SEMICOLON       -> ;
PUBLIC          -> public
VOID            -> void
ID              -> MostrarInfo
LPAREN          -> (
RPAREN          -> )
LBRACE          -> {
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Producto: 
PLUS            -> +
ID              -> nombre
RPAREN          -> )
SEMICOLON       -> ;
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Precio: $
PLUS            -> +
ID              -> precio
RPAREN          -> )
SEMICOLON       -> ;
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Stock disponible: 
PLUS            -> +
ID              -> stock
RPAREN          -> )
SEMICOLON       -> ;
IF              -> if
LPAREN          -> (
ID              -> stock
GT              -> >
NUMBER          -> 0
RPAREN          -> )
LBRACE          -> {
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Producto en inventario.
RPAREN          -> )
SEMICOLON       -> ;
RBRACE          -> }
ELSE            -> else
LBRACE          -> {
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Producto agotado.
RPAREN          -> )
SEMICOLON       -> ;
RBRACE          -> }
IF              -> if
LPAREN          -> (
ID              -> precio
GE              -> >=
NUMBER          -> 15
RPAREN          -> )
LBRACE          -> {
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Precio válido para la venta.
RPAREN          -> )
SEMICOLON       -> ;
RBRACE          -> }
ELSE            -> else
LBRACE          -> {
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Precio demasiado bajo, revisar margen de ganancia.
RPAREN          -> )
SEMICOLON       -> ;
RBRACE          -> }
RBRACE          -> }
PUBLIC          -> public
BOOL            -> bool
ID              -> DisponibleParaVenta
LPAREN          -> (
RPAREN          -> )
LBRACE          -> {
IF              -> if
LPAREN          -> (
ID              -> stock
GT              -> >
NUMBER          -> 0
AND             -> &&
ID              -> precio
GE              -> >=
NUMBER          -> 15
RPAREN          -> )
LBRACE          -> {
RETURN          -> return
ID              -> true
SEMICOLON       -> ;
RBRACE          -> }
RETURN          -> return
ID              -> false
SEMICOLON       -> ;
RBRACE          -> }
PUBLIC          -> public
ENUM            -> enum
ID              -> Categoria
LBRACE          -> {
ID              -> Electronica
COMMA           -> ,
ID              -> Oficina
COMMA           -> ,
ID              -> Hogar
RBRACE          -> }
PUBLIC          -> public
STRUCT          -> struct
ID              -> Garantia
LBRACE          -> {
PUBLIC          -> public
INT             -> int
ID              -> anios
SEMICOLON       -> ;
PUBLIC          -> public
BOOL            -> bool
ID              -> incluyeDanios
SEMICOLON       -> ;
PUBLIC          -> public
ID              -> Garantia
LPAREN          -> (
INT             -> int
ID              -> anios
COMMA           -> ,
BOOL            -> bool
ID              -> incluyeDanios
RPAREN          -> )
LBRACE          -> {
THIS            -> this
DOT             -> .
ID              -> anios
ASSIGN          -> =
ID              -> anios
SEMICOLON       -> ;
THIS            -> this
DOT             -> .
ID              -> incluyeDanios
ASSIGN          -> =
ID              -> incluyeDanios
SEMICOLON       -> ;
RBRACE          -> }
RBRACE          -> }
RBRACE          -> }
PUBLIC          -> public
CLASS           -> class
CLASS_NAME      -> Inventario
LBRACE          -> {
PUBLIC          -> public
VOID            -> void
ID              -> ClasificarProducto
LPAREN          -> (
INT             -> int
ID              -> codigo
RPAREN          -> )
LBRACE          -> {
SWITCH          -> switch
LPAREN          -> (
ID              -> codigo
RPAREN          -> )
LBRACE          -> {
CASE            -> case
NUMBER          -> 100
COLON           -> :
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Producto clasificado como: Electrónica
RPAREN          -> )
SEMICOLON       -> ;
BREAK           -> break
SEMICOLON       -> ;
CASE            -> case
NUMBER          -> 200
COLON           -> :
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Producto clasificado como: Oficina
RPAREN          -> )
SEMICOLON       -> ;
BREAK           -> break
SEMICOLON       -> ;
CASE            -> case
NUMBER          -> 300
COLON           -> :
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Producto clasificado como: Hogar
RPAREN          -> )
SEMICOLON       -> ;
BREAK           -> break
SEMICOLON       -> ;
DEFAULT         -> default
COLON           -> :
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Código no reconocido.
RPAREN          -> )
SEMICOLON       -> ;
BREAK           -> break
SEMICOLON       -> ;
RBRACE          -> }
RBRACE          -> }
PUBLIC          -> public
VOID            -> void
ID              -> MostrarCiclo
LPAREN          -> (
RPAREN          -> )
LBRACE          -> {
FOR             -> for
LPAREN          -> (
INT             -> int
ID              -> i
ASSIGN          -> =
NUMBER          -> 1
SEMICOLON       -> ;
ID              -> i
LE              -> <=
NUMBER          -> 3
SEMICOLON       -> ;
ID              -> i
INCREMENT       -> ++
RPAREN          -> )
LBRACE          -> {
IF              -> if
LPAREN          -> (
ID              -> i
EQUALS          -> ==
NUMBER          -> 2
RPAREN          -> )
LBRACE          -> {
CONTINUE        -> continue
SEMICOLON       -> ;
RBRACE          -> }
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Iteración número: 
PLUS            -> +
ID              -> i
RPAREN          -> )
SEMICOLON       -> ;
IF              -> if
LPAREN          -> (
ID              -> i
EQUALS          -> ==
NUMBER          -> 3
RPAREN          -> )
LBRACE          -> {
BREAK           -> break
SEMICOLON       -> ;
RBRACE          -> }
RBRACE          -> }
RBRACE          -> }
PUBLIC          -> public
VOID            -> void
ID              -> MostrarCaracteres
LPAREN          -> (
RPAREN          -> )
LBRACE          -> {
CHAR            -> char
ID              -> inicial
ASSIGN          -> =
CHAR_LITERAL    -> M
SEMICOLON       -> ;
CHAR            -> char
ID              -> final
ASSIGN          -> =
CHAR_LITERAL    -> Z
SEMICOLON       -> ;
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Inicial: 
PLUS            -> +
ID              -> inicial
PLUS            -> +
STRING_LITERAL  -> , Final: 
PLUS            -> +
ID              -> final
RPAREN          -> )
SEMICOLON       -> ;
RBRACE          -> }
RBRACE          -> }
XML_COMMENT     -> /// <summary>
XML_COMMENT     -> /// Sección de prueba para tokens personalizados relacionados con productos e inventario.
XML_COMMENT     -> /// </summary>
PUBLIC          -> public
CLASS           -> class
CLASS_NAME      -> DiagnosticoInventario
LBRACE          -> {
PUBLIC          -> public
VOID            -> void
ID              -> EjecutarAnalisis
LPAREN          -> (
RPAREN          -> )
LBRACE          -> {
FLOAT           -> float
ID              -> temperaturaAlmacen
ASSIGN          -> =
FLOAT_LITERAL   -> 22.5
SEMICOLON       -> ;
BOOL            -> bool
ID              -> productoActivo
ASSIGN          -> =
ID              -> true
SEMICOLON       -> ;
STRING          -> string
ID              -> fechaRegistro
ASSIGN          -> =
DATE_LITERAL    -> 2025-06-14
SEMICOLON       -> ;
INT             -> int
ID              -> codigoHex
ASSIGN          -> =
HEX_LITERAL     -> 500
SEMICOLON       -> ;
INT             -> int
ID              -> codigoBin
ASSIGN          -> =
BIN_LITERAL     -> 10
SEMICOLON       -> ;
IF              -> if
LPAREN          -> (
ID              -> productoActivo
RPAREN          -> )
LBRACE          -> {
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Diagnóstico: Producto activo registrado el 
PLUS            -> +
ID              -> fechaRegistro
RPAREN          -> )
SEMICOLON       -> ;
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Código Hex: 
PLUS            -> +
ID              -> codigoHex
PLUS            -> +
STRING_LITERAL  -> , Binario: 
PLUS            -> +
ID              -> codigoBin
RPAREN          -> )
SEMICOLON       -> ;
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Temperatura del almacén: 
PLUS            -> +
ID              -> temperaturaAlmacen
PLUS            -> +
STRING_LITERAL  -> °C
RPAREN          -> )
SEMICOLON       -> ;
RBRACE          -> }
ELSE            -> else
LBRACE          -> {
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> Producto inactivo.
RPAREN          -> )
SEMICOLON       -> ;
RBRACE          -> }
RBRACE          -> }
PUBLIC          -> public
VOID            -> void
ID              -> MostrarMensaje
LPAREN          -> (
STRING          -> string
ID              -> mensaje
ASSIGN          -> =
STRING_LITERAL  -> Hola
RPAREN          -> )
LBRACE          -> {
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
ID              -> mensaje
RPAREN          -> )
SEMICOLON       -> ;
RBRACE          -> }
RBRACE          -> }
PUBLIC          -> public
CLASS           -> class
CLASS_NAME      -> Programa
LBRACE          -> {
PUBLIC          -> public
STATIC          -> static
VOID            -> void
ID              -> Main
LPAREN          -> (
STRING          -> string
LBRACKET        -> [
RBRACKET        -> ]
ID              -> args
RPAREN          -> )
LBRACE          -> {
ID              -> Producto
ID              -> p
ASSIGN          -> =
NEW             -> new
ID              -> Producto
LPAREN          -> (
RPAREN          -> )
SEMICOLON       -> ;
ID              -> p
DOT             -> .
ID              -> MostrarInfo
LPAREN          -> (
RPAREN          -> )
SEMICOLON       -> ;
BOOL            -> bool
ID              -> puedeVenderse
ASSIGN          -> =
ID              -> p
DOT             -> .
ID              -> DisponibleParaVenta
LPAREN          -> (
RPAREN          -> )
SEMICOLON       -> ;
ID              -> Console
DOT             -> .
ID              -> WriteLine
LPAREN          -> (
STRING_LITERAL  -> ¿Disponible para la venta?: 
PLUS            -> +
ID              -> puedeVenderse
RPAREN          -> )
SEMICOLON       -> ;
ID              -> DiagnosticoInventario
ID              -> d
ASSIGN          -> =
NEW             -> new
ID              -> DiagnosticoInventario
LPAREN          -> (
RPAREN          -> )
SEMICOLON       -> ;
ID              -> d
DOT             -> .
ID              -> EjecutarAnalisis
LPAREN          -> (
RPAREN          -> )
SEMICOLON       -> ;
ID              -> d
DOT             -> .
ID              -> MostrarMensaje
LPAREN          -> (
RPAREN          -> )
SEMICOLON       -> ;
RBRACE          -> }
RBRACE          -> }